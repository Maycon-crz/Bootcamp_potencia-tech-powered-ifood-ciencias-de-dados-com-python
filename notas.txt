-----------------------------------------------
-----------------------------------------------
Fundamentos de Lógica de programação:
------
* Algoritmos: Sequencías de passos para atingir algum objetivo;
* Problema -> Algoritimo -> Programa
* A narrativa não é nada mais do que uma receita de bolo;
> Primeio sempre foque em entender o problema;
> Uma narrativa detalhada tem de 8 a 15 passos;
* Joguinho de lógica: https://www.google.com/doodles/celebrating-50-years-of-kids-coding
* Pseudocódigo é uma forma genérica de escrever um algoritmo, utilizando uma linguagem simples sem necessidade de conhecer qualquer sintaxe de qualquer linguagem de programação livre de contexto.
-----------------------------------------------
-----------------------------------------------
Organizando seus estudos com os roadmaps DIO eo Notion
------
* https://digitalinnovationone.github.io/roadmaps/
* https://www.notion.so/product
* https://www.notion.so/product/ai
* https://www.notion.so/help/reference
* https://indify.co e https://widgetbox.app
* Notion API: https://developers.notion.com
* GitHub da professora: elidianaandrade
* Slides: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EeP49vd0I0ZPq-rYTIGIvDQBKo_Ne-mTz-RyQLk-ij8F-A?rtime=eXrsh7WA20g
-----------------------------------------------
-----------------------------------------------
Vercionamento de código com Git e HitHub
------
* Link do Git: https://git-scm.com
* git commit => git pull => git push
* https://github.com
* Coloquei autenticação de 2 fatores no GitHub;
* Configurar para o mesmo nome e Email fiquem globais;
- git config user.name;
- git config user.email;
- git config init defaultBranch (mostra a branch principal)
- git config --global --list (mostra as configurações que foram definidas)
* O git é independente do GitHub
* Autenticação via token;
- Para subir os códigos para o GitHub é necessário gerar um token de acesso;
- Settings => Developer Settings => Personl access tokens => Tokens => Generate new token;
- Depois de gerado é possível salvar o token no git para toda vez que subir uma alteração seja autenticada;
- Comando: (git config --global credential.helper store) ou Comando: git config --global credential.helper cache caso sua máquina for  compartilhada;
> Após por o comando quando fizer o primeiro git clone vai pedir a senha a põe o token de acesso que nos próximos git clone não va ser mais precisar;
* Autenticação via SSH;
- SSH é um protocolo de Rede;
- Comando para ver se existem chaves SSH:
> No Git Bash: ls -a ~/.ssh
> Para gerar Chave SSH: GitHub Docs => Authentication => Conexão com SSH => Gerar nova chave SSH;
> Comando para gerar o arquivo com a chave: ssh-keygen -t ed25519 -C "your_email@example.com";
# Insira o lugar para salvar e depois a passphrase que é uma frase de segurança
# Depois adicione o ssh-agent para manter a senha armazenada seguramente: eval "$(ssh-agent -s)"
# Tem outros passos que não fiz porque considerei desnecessário no momento;
---
* Criando e Clonando Repositórios
- mkdir repo-local
- cd repo-local
- git init (inicia o repositório)
- cd .git
> cat config (Exibe as configurações do repositório);
- git remote -v (Exibe o repositório remoto que você esta conectado);
- git remote add origin {URL} (Conecta com um repositório remoto);
- git clone {URL} --branch feature-l --single-branch (Clona o repositório com apena uma branch específicada);
- Quando você cria um repositório no gitHub se selecionar nenhuma das opções nem o readme depois de criado ele mostra as dicas de comandos que quando você seleciona as opções não aparece;
---
* Salvando Alterações no Repositório Local
- git status (Mostra o status do repositório);
- touch README.md (Para criar o README);
- Untracked files (São arquivos não rastreados);
- Link: https://readme.so/pt (Site que ajuda a criar readme.md)
- git commit -m "Mensagem para o commit"; (Salvando o commit);
- git log (Exibe o hitórico dos commits);
- O git não reconhece diretórios vazios;
- echo > .gitignore (Cria o arquivo .gitignore);
- touch aulas/.gitkeep (o gitkeep serve para que o git reconheça um diretório vazio)
---
* Desfazendo Alterações no Resitório Local
- git restore <file> (Descarta todas as alterações que foram feitas localmente);
- Para remover a preparação para repositório caso tenha digitado git init em um local errado use: rm -rf .git
- Comando para alterar a mensagem do commit: git commit --amend -m "Nova mensagem"
- Comando para voltar no tempo a outro commit: 
> git reset --soft <Hash do commit copiado do git log>
- Comando para voltar no tempo ignorando adversidades:
> git reset --hard <Hash do commit>
- git reflog mostra um histórico mais detalhado;
---
* Conectar repositório local com o remoto: 
- git remote add origin;
- Enviando o contéudo do repositório local para o remoto:
> git push -u origin main;
---
* Se entrar em um repositório no GitHub e clicar na tecla (.) vai abrir o editor de código do GitHub;
* git checkout -b <nome_da_branch> (Troca de branch)
* Cada branch funciona de forma independente;
* git branch -v (Lista o último commite de cada branch);
* git merge <nome_da_outra_branch> (mescla a branch atual com outra);
* git branch -d <nome_de_branch> (Exclui uma branch específica);
---
* git pull (Atualiza o repositório local baixando as alterações do remoto e mesclando com o local);
* git fetch (Baixa as alterações remotas mas não mescla com a branch local direto);
* git stash (Armazena as alterações para poder criar outra branch)
* git checkout <nome_da_branch> (Troca de branch);
* https://github.com/elidianaandrade/dio-curso-git-github
* https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EYjkgVZuUv5HsVgJUEPv1_oB_QWs8MFBY_PBQ2UAtLqucg?rtime=BENoL3qC20g
* https://gitfluence.com/
* https://myoctocat.com/
-----------------------------------------------
-----------------------------------------------
Como Entregar seu Desafio de Projeto
------
* Todo desafio é entregue pelo GitHub;
* Metodologia educacional: https://www.uvu.edu/otl/resources/group_work/pbl.html
* https://www.youtube.com/watch?v=WfD_S2Vi4qI&t=1304s
* https://web.dio.me/lives/primeiros-passos-com-git-e-github
-----------------------------------------------
-----------------------------------------------
Contribuindo em um projeto open source no GitHub
------
* É um projeto de cófigo aberto, livre para ser modificado;
* Criar um arquivo com a documentação de como contribuir com o projeto;
* Issues => New Issue (Sugerir melhoria)
- Você pode estar adicionando tamplates para novas issues para facilitar a contribuição das pessoas;
- Na hora de commitar adicionar #numero_da_issue no final da mensagem;
* Pull request (Encaminhar melhoria)
- Fork (Criar uma cópia do repositório original porque não se tem permissão para alterar no repositório original)
> Criar um clone na máquina - git clone;
# Adincionar o repositório original como upstream (para fazer referência ao original) = git remote add upstream <url>
> git pull upstream main (comando para baixar as atualizações do repositório original no clone/repositório local)
* https://github.com/elidianaandrade/dio-lab-open-source
* https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EakzpKFKi1lJihVQn7sabE8BG7BzYVNs1p6rVDJanJcgdQ?rtime=NAa7if-D20g
---
---
- Fiz o fork do repositório dela para minha conta do GitHub;
- Clonei esse repositório forked para a minha máquina;
- Adicionei o remote upstream para manter o meu repositório local atualizado: git remote add upstream https://github.com/elidianaandrade/dio-lab-open-source.git
- OBS: Antes de fazer qualquer alteração, baixar e atualizar o repositório local usando o comando: git pull upstream main
- Fil o pull request para o original só esperar a aprovação, mas a principio da para seguir em frente;
-----------------------------------------------
-----------------------------------------------
Aula Inaugural - Potência Tech powered by iFood: Ciência de Dados com Python
---
* Ela disse que no final da aula inaugural é para tirar um print e postar no linkedin;
* Mesmo que conclua todo o conteúdo tem que assistir todas as mentorias para concluir o bootcamp;
-----------------------------------------------
-----------------------------------------------
Ambiente de Desenvolvimento e Primeiros Passos com Python
---
* Origem do Python 1989 - Guido Van Rossum;
- Influenciado pela linguagem ABC usada para iniciantes;
- Curva de aprendizado baixa;
- 1991 primeira versão pública
- A partir da versão 3.0 teve mudanças muito profundas que melhoraram a linguagem;
* Tipagem dinâmica e forte;
* Multiplataforma e multiparadigma;
* Comunidade grande;
* Curva de aprendizado baixa;
* Para aplicativos mobile não é recomendado;
---
* Configuração do ambiente de desenvolvimento
- Para verificar se está instalado: python -V
- https://www.python.org/downloads/release/python-3114
- Vídeo simples e rápido que encontrei no youtube de como intalar o python: https://www.youtube.com/watch?v=0pG4NrucQR4
* Editores: VSCode ou PyCharm
* Extensões:
- Python
- autoDocstring - Python Docstring Generator
- Python Extension Pack
- IntelliCode
---
* Primeiro programa
- Programar é informar ao computador uma sequência de rotinas que devem ser processadas;
- extensão do python: py
* Slides: https://academiapme-my.sharepoint.com/personal/kawan_dio_me/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fkawan%5Fdio%5Fme%2FDocuments%2FSlides%20dos%20Cursos%2FPython%20%2D%20M%C3%B3dulo%20I%20%2D%20Fundamentos%2FCurso%201&ga=1
-----------------------------------------------
-----------------------------------------------
Conhecendo a Linguagem de Programação Python
---
* Tipos de dados
- Texto: str;
- Sequência: list, tuple, range;
- Mapa: dict;
- Coleção: set, fronzenset
- Os tipos são importantes para delimitar o range de posibilidades;
* Para ligar o modo interativo é só por python no terminal e dar enter;
---
* Modo interativo
- É escrever e ver o código na hora;
- Não precisa por print executa os códigos na hora;
- Formas de iniciar: digitar python no terminal;
> Para sair digite: exit()
- dir() Retorna o escopo local ou todos os métodos possíveis do tipo;
- help()
> Após dar enter o help pode descrever todos os métodos possiveis de um tipo é só digitar e dar enter;
> Para sair dite a letra: q após isso digite enter;
> Basicamente é uma documentação offline;
---
* Variáveis e constantes:
- Variáveis: São valores que podem sofrer alterações no decorrer da execução do programa;
- Constantes: Os valores são imutaveis;
> Em python não existe um tipo para informar que a variável é uma constante então se usa convenssão como por o nome da constante em MAIUSCULO;
- Boas práticas:
> Nomes em snake_case
> Nomes sugestivos
> Nome de constantes todo em maiúsculo
---
* Conversão de tipos
- Se fizer uma divisão de numero inteiro e por 2 barras
- Converter para String: str(parametro)
---
* Funções de entrada e saida:
- input("Mensagem de captura")
---
* https://github.com/digitalinnovationone/trilha-python-dio
* https://docs.python.org/3/library/stdtypes.html
-----------------------------------------------
-----------------------------------------------
Tipos de Operadores com Python
---
* Operadores aritméticos;
- (+, -, *, /, //, %, **)
> Módulo: %
> Exponenciação: **
- Segue a ordem de operação padrão
> Para alterar a ordem padrão use ()
- Vai da esquerda para a direita
---
* Operadores de comparação
- Usados para comprar 2 valores
- (==, !=, >, >=, <, <=)...
---
* Operadores de atribuição
- (=, +=, -=, *=, /5, //5)...
---
* Operadores lógicos
- Resultam em um bool (true ou false);
- (and, or)
- Negação: not
- lista_vazia = []
> not lista_vazia
# vai retornar: true
- not ""
> vai retornar: true
---
* Operadores de identidade
- usados para comprar se os objetos testados ocupam a mesma posição em memória
- (is, is not)
---
* Operadores de associação
- É case sensitive
---
* https://academiapme-my.sharepoint.com/:p:/r/personal/kawan_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7BACEEEE85-1D30-45FA-9CBB-FC82DF9C729B%7D&file=14%20-%20%5BDio%5D%20Operadores%20de%20associa%C3%A7%C3%A3o.pptx&action=edit&mobileredirect=true
-----------------------------------------------
-----------------------------------------------
Estruturas Condicionais e de Repetição em Python
---
* Indentação  e blocos
- Em Python o fechamento do bloco é delimitado pela indentação;
- Em Java as chaves void funcao_1(){} indicam abertura e fechamento de blocos;
- Em Python o Bloco inicia com (:);
- Em Python uma boa prática é deixar 4 espaços para identificar os blocos
- Em Python não é opcional indentar;
---
* Estruturas condicionais
- Permite o desvio de fluxo de controle conforme expressões lógicas;
- (if, else, elif)
> elif é igual o elseif do PHP;
- if ternário
> Se usa if e else mesmo ao invés de ? e : como no PHP
---
* Estruturas de Repetição
- Usadas para repetir um trecho de código;
- (for, while)
- (for) é usado para percorrer um objeto iterável
-  range é uma função built-in do Python
> serve para pegar um intervalo específico de um ponto até outro;
- while é usado para repetir um bloco de código
> Faz sentido usar quando não se sabe o número de vezes que o bloco deve ser executado;
> A diferença entre o if e o while é que o if testa e executa, já o while executa até atinjir o objetivo;
> break pausa o código;
> continue #É o contrário do break;
---
* Links: https://academiapme-my.sharepoint.com/:p:/r/personal/kawan_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7B8668BA5E-74EC-4F25-A707-E571A7A54E57%7D&file=17%20-%20%5BDio%5D%20Estruturas%20de%20repeti%C3%A7%C3%A3o.pptx&action=edit&mobileredirect=true
-----------------------------------------------
-----------------------------------------------
Manipulando Strings com Python
---
* Conhecendo métodos úteis da classe string
- strip() - Remove espaços em branco no inicio e no fim
- lstrip() - Remove espaço em branco na esquerda;
- rstrip() - Remove espaço em branco na direita;
- center(10, "#") = "##Python##"
- ".".join("Python") = "P.y.t.h.o.n"
---
* Interpolação de variáveis
- Old Style
> %s para valores do tipo string
> %d para valores do tipo
- format()
- {nome_da_variavel}
---
* Fatiamento de string
- 