-----------------------------------------------
-----------------------------------------------
Fundamentos de Lógica de programação:
------
* Algoritmos: Sequencías de passos para atingir algum objetivo;
* Problema -> Algoritimo -> Programa
* A narrativa não é nada mais do que uma receita de bolo;
> Primeio sempre foque em entender o problema;
> Uma narrativa detalhada tem de 8 a 15 passos;
* Joguinho de lógica: https://www.google.com/doodles/celebrating-50-years-of-kids-coding
* Pseudocódigo é uma forma genérica de escrever um algoritmo, utilizando uma linguagem simples sem necessidade de conhecer qualquer sintaxe de qualquer linguagem de programação livre de contexto.
-----------------------------------------------
-----------------------------------------------
Organizando seus estudos com os roadmaps DIO eo Notion
------
* https://digitalinnovationone.github.io/roadmaps/
* https://www.notion.so/product
* https://www.notion.so/product/ai
* https://www.notion.so/help/reference
* https://indify.co e https://widgetbox.app
* Notion API: https://developers.notion.com
* GitHub da professora: elidianaandrade
* Slides: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EeP49vd0I0ZPq-rYTIGIvDQBKo_Ne-mTz-RyQLk-ij8F-A?rtime=eXrsh7WA20g
-----------------------------------------------
-----------------------------------------------
Vercionamento de código com Git e HitHub
------
* Link do Git: https://git-scm.com
* git commit => git pull => git push
* https://github.com
* Coloquei autenticação de 2 fatores no GitHub;
* Configurar para o mesmo nome e Email fiquem globais;
- git config user.name;
- git config user.email;
- git config init defaultBranch (mostra a branch principal)
- git config --global --list (mostra as configurações que foram definidas)
* O git é independente do GitHub
* Autenticação via token;
- Para subir os códigos para o GitHub é necessário gerar um token de acesso;
- Settings => Developer Settings => Personl access tokens => Tokens => Generate new token;
- Depois de gerado é possível salvar o token no git para toda vez que subir uma alteração seja autenticada;
- Comando: (git config --global credential.helper store) ou Comando: git config --global credential.helper cache caso sua máquina for  compartilhada;
> Após por o comando quando fizer o primeiro git clone vai pedir a senha a põe o token de acesso que nos próximos git clone não va ser mais precisar;
* Autenticação via SSH;
- SSH é um protocolo de Rede;
- Comando para ver se existem chaves SSH:
> No Git Bash: ls -a ~/.ssh
> Para gerar Chave SSH: GitHub Docs => Authentication => Conexão com SSH => Gerar nova chave SSH;
> Comando para gerar o arquivo com a chave: ssh-keygen -t ed25519 -C "your_email@example.com";
# Insira o lugar para salvar e depois a passphrase que é uma frase de segurança
# Depois adicione o ssh-agent para manter a senha armazenada seguramente: eval "$(ssh-agent -s)"
# Tem outros passos que não fiz porque considerei desnecessário no momento;
---
* Criando e Clonando Repositórios
- mkdir repo-local
- cd repo-local
- git init (inicia o repositório)
- cd .git
> cat config (Exibe as configurações do repositório);
- git remote -v (Exibe o repositório remoto que você esta conectado);
- git remote add origin {URL} (Conecta com um repositório remoto);
- git clone {URL} --branch feature-l --single-branch (Clona o repositório com apena uma branch específicada);
- Quando você cria um repositório no gitHub se selecionar nenhuma das opções nem o readme depois de criado ele mostra as dicas de comandos que quando você seleciona as opções não aparece;
---
* Salvando Alterações no Repositório Local
- git status (Mostra o status do repositório);
- touch README.md (Para criar o README);
- Untracked files (São arquivos não rastreados);
- Link: https://readme.so/pt (Site que ajuda a criar readme.md)
- git commit -m "Mensagem para o commit"; (Salvando o commit);
- git log (Exibe o hitórico dos commits);
- O git não reconhece diretórios vazios;
- echo > .gitignore (Cria o arquivo .gitignore);
- touch aulas/.gitkeep (o gitkeep serve para que o git reconheça um diretório vazio)
---
* Desfazendo Alterações no Resitório Local
- git restore <file> (Descarta todas as alterações que foram feitas localmente);
- Para remover a preparação para repositório caso tenha digitado git init em um local errado use: rm -rf .git
- Comando para alterar a mensagem do commit: git commit --amend -m "Nova mensagem"
- Comando para voltar no tempo a outro commit: 
> git reset --soft <Hash do commit copiado do git log>
- Comando para voltar no tempo ignorando adversidades:
> git reset --hard <Hash do commit>
- git reflog mostra um histórico mais detalhado;
---
* Conectar repositório local com o remoto: 
- git remote add origin;
- Enviando o contéudo do repositório local para o remoto:
> git push -u origin main;
---
* Se entrar em um repositório no GitHub e clicar na tecla (.) vai abrir o editor de código do GitHub;
* git checkout -b <nome_da_branch> (Troca de branch)
* Cada branch funciona de forma independente;
* git branch -v (Lista o último commite de cada branch);
* git merge <nome_da_outra_branch> (mescla a branch atual com outra);
* git branch -d <nome_de_branch> (Exclui uma branch específica);
---
* git pull (Atualiza o repositório local baixando as alterações do remoto e mesclando com o local);
* git fetch (Baixa as alterações remotas mas não mescla com a branch local direto);
* git stash (Armazena as alterações para poder criar outra branch)
* git checkout <nome_da_branch> (Troca de branch);
* https://github.com/elidianaandrade/dio-curso-git-github
* https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EYjkgVZuUv5HsVgJUEPv1_oB_QWs8MFBY_PBQ2UAtLqucg?rtime=BENoL3qC20g
* https://gitfluence.com/
* https://myoctocat.com/
-----------------------------------------------
-----------------------------------------------
Como Entregar seu Desafio de Projeto
------
* Todo desafio é entregue pelo GitHub;
* Metodologia educacional: https://www.uvu.edu/otl/resources/group_work/pbl.html
* https://www.youtube.com/watch?v=WfD_S2Vi4qI&t=1304s
* https://web.dio.me/lives/primeiros-passos-com-git-e-github
-----------------------------------------------
-----------------------------------------------
Contribuindo em um projeto open source no GitHub
------
* É um projeto de cófigo aberto, livre para ser modificado;
* Criar um arquivo com a documentação de como contribuir com o projeto;
* Issues => New Issue (Sugerir melhoria)
- Você pode estar adicionando tamplates para novas issues para facilitar a contribuição das pessoas;
- Na hora de commitar adicionar #numero_da_issue no final da mensagem;
* Pull request (Encaminhar melhoria)
- Fork (Criar uma cópia do repositório original porque não se tem permissão para alterar no repositório original)
> Criar um clone na máquina - git clone;
# Adincionar o repositório original como upstream (para fazer referência ao original) = git remote add upstream <url>
> git pull upstream main (comando para baixar as atualizações do repositório original no clone/repositório local)
* https://github.com/elidianaandrade/dio-lab-open-source
* https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EakzpKFKi1lJihVQn7sabE8BG7BzYVNs1p6rVDJanJcgdQ?rtime=NAa7if-D20g
---
---
- Fiz o fork do repositório dela para minha conta do GitHub;
- Clonei esse repositório forked para a minha máquina;
- Adicionei o remote upstream para manter o meu repositório local atualizado: git remote add upstream https://github.com/elidianaandrade/dio-lab-open-source.git
- OBS: Antes de fazer qualquer alteração, baixar e atualizar o repositório local usando o comando: git pull upstream main
- Fil o pull request para o original só esperar a aprovação, mas a principio da para seguir em frente;
-----------------------------------------------
-----------------------------------------------
Aula Inaugural - Potência Tech powered by iFood: Ciência de Dados com Python
---
* Ela disse que no final da aula inaugural é para tirar um print e postar no linkedin;
* Mesmo que conclua todo o conteúdo tem que assistir todas as mentorias para concluir o bootcamp;
-----------------------------------------------
-----------------------------------------------
Ambiente de Desenvolvimento e Primeiros Passos com Python
---
* Origem do Python 1989 - Guido Van Rossum;
- Influenciado pela linguagem ABC usada para iniciantes;
- Curva de aprendizado baixa;
- 1991 primeira versão pública
- A partir da versão 3.0 teve mudanças muito profundas que melhoraram a linguagem;
* Tipagem dinâmica e forte;
* Multiplataforma e multiparadigma;
* Comunidade grande;
* Curva de aprendizado baixa;
* Para aplicativos mobile não é recomendado;
---
* Configuração do ambiente de desenvolvimento
- Para verificar se está instalado: python -V
- https://www.python.org/downloads/release/python-3114
- Vídeo simples e rápido que encontrei no youtube de como intalar o python: https://www.youtube.com/watch?v=0pG4NrucQR4
* Editores: VSCode ou PyCharm
* Extensões:
- Python
- autoDocstring - Python Docstring Generator
- Python Extension Pack
- IntelliCode
---
* Primeiro programa
- Programar é informar ao computador uma sequência de rotinas que devem ser processadas;
- extensão do python: py
* Slides: https://academiapme-my.sharepoint.com/personal/kawan_dio_me/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fkawan%5Fdio%5Fme%2FDocuments%2FSlides%20dos%20Cursos%2FPython%20%2D%20M%C3%B3dulo%20I%20%2D%20Fundamentos%2FCurso%201&ga=1
-----------------------------------------------
-----------------------------------------------
Conhecendo a Linguagem de Programação Python
---
* Tipos de dados
- Texto: str;
- Sequência: list, tuple, range;
- Mapa: dict;
- Coleção: set, fronzenset
- Os tipos são importantes para delimitar o range de posibilidades;
* Para ligar o modo interativo é só por python no terminal e dar enter;
---
* Modo interativo
- É escrever e ver o código na hora;
- Não precisa por print executa os códigos na hora;
- Formas de iniciar: digitar python no terminal;
> Para sair digite: exit()
- dir() Retorna o escopo local ou todos os métodos possíveis do tipo;
- help()
> Após dar enter o help pode descrever todos os métodos possiveis de um tipo é só digitar e dar enter;
> Para sair dite a letra: q após isso digite enter;
> Basicamente é uma documentação offline;
---
* Variáveis e constantes:
- Variáveis: São valores que podem sofrer alterações no decorrer da execução do programa;
- Constantes: Os valores são imutaveis;
> Em python não existe um tipo para informar que a variável é uma constante então se usa convenssão como por o nome da constante em MAIUSCULO;
- Boas práticas:
> Nomes em snake_case
> Nomes sugestivos
> Nome de constantes todo em maiúsculo
---
* Conversão de tipos
- Se fizer uma divisão de numero inteiro e por 2 barras
- Converter para String: str(parametro)
---
* Funções de entrada e saida:
- input("Mensagem de captura")
---
* https://github.com/digitalinnovationone/trilha-python-dio
* https://docs.python.org/3/library/stdtypes.html
-----------------------------------------------
-----------------------------------------------
Tipos de Operadores com Python
---
* Operadores aritméticos;
- (+, -, *, /, //, %, **)
> Módulo: %
> Exponenciação: **
- Segue a ordem de operação padrão
> Para alterar a ordem padrão use ()
- Vai da esquerda para a direita
---
* Operadores de comparação
- Usados para comprar 2 valores
- (==, !=, >, >=, <, <=)...
---
* Operadores de atribuição
- (=, +=, -=, *=, /5, //5)...
---
* Operadores lógicos
- Resultam em um bool (true ou false);
- (and, or)
- Negação: not
- lista_vazia = []
> not lista_vazia
# vai retornar: true
- not ""
> vai retornar: true
---
* Operadores de identidade
- usados para comprar se os objetos testados ocupam a mesma posição em memória
- (is, is not)
---
* Operadores de associação
- É case sensitive
---
* https://academiapme-my.sharepoint.com/:p:/r/personal/kawan_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7BACEEEE85-1D30-45FA-9CBB-FC82DF9C729B%7D&file=14%20-%20%5BDio%5D%20Operadores%20de%20associa%C3%A7%C3%A3o.pptx&action=edit&mobileredirect=true
-----------------------------------------------
-----------------------------------------------
Estruturas Condicionais e de Repetição em Python
---
* Indentação  e blocos
- Em Python o fechamento do bloco é delimitado pela indentação;
- Em Java as chaves void funcao_1(){} indicam abertura e fechamento de blocos;
- Em Python o Bloco inicia com (:);
- Em Python uma boa prática é deixar 4 espaços para identificar os blocos
- Em Python não é opcional indentar;
---
* Estruturas condicionais
- Permite o desvio de fluxo de controle conforme expressões lógicas;
- (if, else, elif)
> elif é igual o elseif do PHP;
- if ternário
> Se usa if e else mesmo ao invés de ? e : como no PHP
---
* Estruturas de Repetição
- Usadas para repetir um trecho de código;
- (for, while)
- (for) é usado para percorrer um objeto iterável
-  range é uma função built-in do Python
> serve para pegar um intervalo específico de um ponto até outro;
- while é usado para repetir um bloco de código
> Faz sentido usar quando não se sabe o número de vezes que o bloco deve ser executado;
> A diferença entre o if e o while é que o if testa e executa, já o while executa até atinjir o objetivo;
> break pausa o código;
> continue #É o contrário do break;
---
* Links: https://academiapme-my.sharepoint.com/:p:/r/personal/kawan_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7B8668BA5E-74EC-4F25-A707-E571A7A54E57%7D&file=17%20-%20%5BDio%5D%20Estruturas%20de%20repeti%C3%A7%C3%A3o.pptx&action=edit&mobileredirect=true
-----------------------------------------------
-----------------------------------------------
Manipulando Strings com Python
---
* Conhecendo métodos úteis da classe string
- strip() - Remove espaços em branco no inicio e no fim
- lstrip() - Remove espaço em branco na esquerda;
- rstrip() - Remove espaço em branco na direita;
- center(10, "#") = "##Python##"
- ".".join("Python") = "P.y.t.h.o.n"
---
* Interpolação de variáveis
- Old Style
> %s para valores do tipo string
> %d para valores do tipo
- format()
- {nome_da_variavel}
---
* Fatiamento de string
- Strings de multiplas linhas e Strings triplas são a mesma coisa;
> Para usar por 3 aspas (") e fecha com mais 3 aspas;
> Útil para exibir mensagens;
- Slides: https://academiapme-my.sharepoint.com/:p:/r/personal/kawan_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7B6A2AB812-91AE-4E8C-8CB3-ACA18889068D%7D&file=18%20-%20%5BDio%5D%20String%20e%20fatiamento.pptx&action=edit&mobileredirect=true
-----------------------------------------------
-----------------------------------------------
Criando um Sitema Bancário com Python
---
* Não deixar por valores negativos;
* Inicialmente vai ser apenas um usuário por vez;
* Todos os depósitos devem ser armazenados em uma variável e exibiidos na operação de extrato;
* Até 3 saques, por limite máximo de saque de R$500,00;
* Exibir no formato R$ xxx.xx
* Regra de depósito;
* Regra de saque;
* Regra de extrato;
* Foi criado um repositório e entreque o dasafio;
-----------------------------------------------
-----------------------------------------------
Trabalhando com Listas em Python
---
* Intrudução
- Repositório: https://github.com/digitalinnovationone/trilha-python-dio
> O material está dividido por branchs
# A branch que tem esse material é a 01_estrutura_de_dados
---
* Listas: Criação e acesso aos dados
- Pode ser declarada usando [] ou com o construtor nomeDaLista = list("abcde") o resultado é nomeDaLista = ["a","b","c","d","e"]
- A lista pode ter valores diversificados com tipos diferentes;
- list(range(10)) gera uma lista de números de 0 a 9;
- A lista é uma sequência é possível acessar os dados utilizando indices;
> 0 péga o primeiro -1 pega o último;
- Fatiamento: acessa diretamente um conjunto de elementos passando o indice inicial e/ou final
> Não é obrigatório passar os 2 indices;
---
* Métodos da class list
- append() - Adiciona elementos a lista;
- lista.clear() - Limpa a lista
- lista.copy() - Faz uma cópia da lista para outra lista;
- lista.count() - Conta os elementos da lista;
- lista.extend() - Concatena 2 listas;
- lista.index("elemento") Retorna o indice da primeira ocorrência do elemento na lista;
- lista.pop() - Uma lista funciona como uma pilha de prato e o pop remove o último prato ou no caso elemento;
- lista.remove("elemento") - Remove a primeira ocorrência do elemento na lista;
- lista.reverse() - Põe a lista de tras para frente;
- lista.sort() - Ordena a lista em ordem padrão alfabética;
> lista.sort(reverse=True) - Ordena a lista em ordem alfabética depois põe de tras para frente;
> lista.sort(key=lambda x: len(x))
- len(lista) - retorna o tamanho da lista;
- sorted() - Ordena interaveis como o sort;
- Material: https://academiapme-my.sharepoint.com/:p:/g/personal/nubia_dio_me/EVPXb3r8bPBEryfuvxp2uhABKXdIyWyufNXAjxQuOzabdQ?rtime=CNT9xDSO20g
-----------------------------------------------
-----------------------------------------------
Conhecendo Tuplas em Python
---
* Tuplas
- São parecidas com listas;
- Os valores da tupla não podem ser alterados;
- Pode ser decladas assim: letras = ("M", "A", "Y", "C") - Por virgula no final para não dar erro;
> ou assim: caracteres = tuple("M", "A", "Y", "C");
- Podem armazenar todos os tipos de objetos;
- Usa-se tupla para garantir que os valores não sejam alterados e essa é a diferença da lista;
- Fatiamento é a mesma lógica da lista;
- Tem menos médotos que a lista;
- Métodos:
> count()
> index()
> len()
- Material: https://academiapme-my.sharepoint.com/:p:/g/personal/nubia_dio_me/ER_pCeDKskRCvfnbSsQtZ7gBnX3Nk7I0_jotj52VPltL3Q?e=BOheig
-----------------------------------------------
-----------------------------------------------
Explorando Conjuntos em Python
---
* Conjuntos
- Criando sets
> set: É uma coleção que não possui objetos repetidos;
> Se usar set(lista) ele vai eliminar os elementos repetidos em uma lista;
> Conjuntos não possuem indexação então depois de usar o set é necessário converter para uma lista novamente;
- union() concatena dois conjuntos;
- intersection() Retonar os elementos que estão iguais nos dois conjuntos;
- difference() Retorna todo o que em um conjunto que não está no outro;
- symmetric_difference() Retorna tudo o que não está na intersecção;
- issuperset() Verifica se todos os elementos de um conjunto estão dentro de outro conjunto;
- isdisjoint() Verifica se todos os elementos de um conjunto não estão dentro do outro conjunto;
- add() Adiciona um elemento a um conjunto se ele já não existir;
- clear() Limpa
- copy() Faz uma copia
- discard() Dicarta um elemento específico, não da erro se o elemento não existir
- pop() Neste caso ele remove o elemento da frente
- remove() Remove um elemento específico, da erro se o elemento não existir e essa é a diferênça para o discard();
- len() Retorna o tamanho do conjunto;
- 10 in numeros - Verifica se o 10 está no conjunto numeros retornando True ou False;
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/nubia_dio_me/EWxVjZ3N_-5OmGYkDrdEQkoB0NuroEV5wvMavMOA9-nI2Q?e=Nr7pE0
-----------------------------------------------
-----------------------------------------------
Aprendendo a Utilizar Dicionários em Python
---
* Dicionários: Criação e acesso aos dados
- Dicionário é um conjunto não-ordenado de pares chave:valor
> Para ser uma chave válida pa o dicionário tem que ser um valor imutável;
> {"cave": "valor"} ou
> dict(chave="valor") ou
> dicionario["chave"] = "valor"
- Dicionário aninhados
> Quando tem uma estrutura dentro da outra;
- items() Retorna uma lista de tuplas
---
* Métodos da classe dict
> dict.fromkeys([]) Serve para criar as chaves sem vincular nenhum valor;
> dict.fromkeys([], "valor_padrao") Criar um conjunto de chaves com um valor padrão para elas;
> contatos.get() Verifica se uma chave existe ou não se não encontrar a chave retorna None;
> contatos.get("", {}) Da para por um valor padão caso não encontrar a chave
- keys() Retorna só as chaves;
- pop() Remove e retorna o valor removido;
- popitem() Você não informa qual a chave e ele vai retirando na sequência;
- setdefault("elemento") Se não existir é adicionado o elemento caso existir retorna o valor apenas;
- update() - Altera usando uma chave já existente;
- values() - Retorna todos os valores sem as chaves;
- Você pode usar o in para verificar se tem uma chave no dicionário;
- del dicionario["chave"] apaga o que está na chave informada;
- del dicionario apaga todo o dicionario
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/nubia_dio_me/EebIipXNLf9GsduivQenMpUBtoohPY2ITXh1HnkB0wa2dg?rtime=EBe0DQ6P20g
-----------------------------------------------
-----------------------------------------------
Dominando Funções Python
---
* Funções Python - Parte 01
- Função é um bloco de código identificado por um nome e pode receber parâmetros;
- Usar funções é programar de maneira estruturada;
- def é a palavra reservada para identificar funções;
- Python permite retornar mais de um valor;
- Argumentos nomeados - servem para poder passar os argumentos em qualque ordem;
- Não precisa explicitar o retorno;
- Args e kwargs
* Funções Pythin - Parte 02
- Parâmetros especiais
> Por posição ou por chave
# (/) Seta para que os parâmetros nomeados sejam recebidos pela função apenas por posição ou seja tem que serem passados na ordem certa;
# (*) Seta para que os parâmetros nomeados sejam recebidos pela função apenas por nome ou seja é necessário passar a chave na hora de chamar a função;
- Objetos de primeira classe
> Em python funções também são objetos de primeira class;
> São objetos que podem ser passados como parâmetros e argumentos e podem ser retornados pelas funções e podem ser atribuidos a variaveis;
- Tem Escopo local e escopo global
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/nubia_dio_me/EaMAaOx_Bq5JqkD9h-Ksh0kB6tFp8Uj38OIjOy-hALypeQ?rtime=TOU9goyQ20g
-----------------------------------------------
-----------------------------------------------
Otimizando o Sistema Bancário com Funções Python
---
* Objetivo Geral
- Separar as funções existentes de saque, depósito e extrato em funções;
- Criar duas novas funções: cadastrar usuário (cliente) e cadastrar conta bancária;
- Criar usuário (cliente)
> Armazenar em uma lista
> Um usuário é composto por: nome, cpf, e endereço.
# O endereço é composto por uma string com o formato: logradouro, nro - bairro - cidade/sigla estado.
# Deve ser armazenado somente os números do CPF.
# Não pode ser cadastrados 2 usuário com o mesmo CPF;
- Criar conta corrente
> Armazenar em uma lista composta por: agência, número da conta e usuário.
> Número da conta sequêncial, iniciando em 1;
> Número da agência fixo: "0001";
> O usuário pode ter mais de uma conta, mas uma conta pertence a somente um usuário;
- Dicas
> Para vincular um usuário a uma conta, filtre a lista de usuários buscando o número do CPF informando para cada usuário da lista;
> \t é para deixar mais vistoso;
-----------------------------------------------
-----------------------------------------------
Introdução a Banco de Dados
---
* Visão Geral da Formação SQL Database Special
---
* Apresentação inicial
- Tutora: Júliana Mascarenhas
---
* Cenário de dados
- Tudo são dados;
- Buscador, tratamento de dados, games, GPS;
- SGBD;
- Aumentou-se a capacidade de processamento e armazenamento;
- Big Data, 3 Vs;
> Velocidade;
> Variedade;
> Volume;
- Bancos noSQL
- Cloud
---
* O que são banco de dados
- Dados são fatos ou uma observação sobre algo;
- Conjunto de dados que transmite informações;
- Conjunto, uma coleção de palavras que dentre elas a um relacionamento;
- Contexto - representação do mundo real;
- Coerência;
- Propósito;
- Ações: Consulta, modificação, atualização;
- Confiável e acurado;
- Reflexo "imediato";
- Amazon: 60 milhões de users, 42 Terabytes, SGBD distribuído;
- SGBD ou DBMS;
> Definição;
> Construção;
> Manipulação: Relatórios, Updates;
> Compartilhamento: Simultaneidade, Acesso, por padrão o BD realiza o bloqueio e a liberação das tabelas;
> Transaction;
> Acesso, Mal funcionamento, Proteção, Ciclo de vida de longo prazo;
> Metadados: Informações que fornecem uma descrição consisa dos dados contidos no BD;
---
* Breve Histórico de SGBDs
- O conceito surge em 1960 para Diminuir custos;
- 1990 surge a POO;
- De 8MB para TeraBytes;
- Modelo Hierárquico;
> BDDBase;
> COBOL;
> Clipper;
> Fox Pro;
> IMS
> REegistros;
> TAD tree;
- Modelo em Rede
---
* Modelo de Banco de Dados Relacional
- Definição das tabelas e constrains para dados;
- Comandos traduzidos pelo processador LDD;
---
* SGBDs mais utilizados pelo mercado
- Oracle, MySQL, PostgreSQL, SQLServer, redis, mongoDB, T-SQL
- ElasticSearch, Cassandra, MariaDB, Acces;
- A diferença entre o MySQL e o MariaDB é que o MariaDB é código aberto;
- Para escolher um SGBD:
> Popularidade, tempo de mercado, Documentação;
> Robustez, confiabilidade, segurança, Multiplataforma;
---
* A era dos dados e o futuro da modelagem - Parte 1
- Contexto dos dados:
> Papel central - sistemas corporativos;
- Researching:
> Nº de tarefas computacionais;
> Quantidade de dados;
> Heterogeneidade;
> Computação paralela e distribuída;
- 4º Paradigma:
> Instrumentos e simulações
> Novo modelo: base na análise e exploração de dados(e-ciência)
> Modelo anterior: empírico, teórico e computacional;
> REquisitos: Composição, Execução, Análise, Reutilização, Reprodutividade, abstração e escalabilidade;
---
* A era dos dados e o futuro da modelagem - Parte 2
- 4º Paradigma;
> Experimentos realizados em larga escala:
# Paralelismo: Múltiplos processadores operando concorrentemente;
# Big Data: Processamento paralelo de dados persistentes e particionados;
# Clound: Recursos de terceiros - Soluções de tecnologia como serviço;
- High Performance Computing (HPC);
> Nós de processamento;
> Sistema de arquivos paralelos - sem persistência;
> Modelos: MPI, OpenMP, OpenCL;
> Acesso: HFF5 e NetDCF;
- Big Data
> Process e Storage: nós de processamento;
> Sistema de arquivos paralelos - persistente;
> Modelos: MapReduce, Spark, SGBDs paralelos;
---
* Novo cenário e novas tecnologias - E agora?
- Carreira tech em Data;
- Data-driven;
- Novos modelos de SGBDs;
- Mercado de data
> Engenheiro de dados
# Desenho/contrução/
# Sustentação das soluções de dados;
# Extração de dados de fontes heterogêneas Disponibilizar os dados para serem consumidos pelos analistas e cientistas;
> Cientista de dados;
# Modelagem
# Reconhecimento de padrões / Predição
> Analista de dados;
# Criação de dashboards
# Apresentação visual dos dados
- Data-Driven
> Analise entende e depois decida;
- Modelos NoSQL
> Voltados para demandas massivas pontuais;
> mongoDB, cassandra, redis, neo4j, db4objects
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EfdP8l5MJvRAmiZFTHypmeQBvVQrq0eWF21fgwJW4mO_qA?rtime=oKTqhdya20g
-----------------------------------------------
-----------------------------------------------
Sistema de Gerenciamento de Banco de Dados
---
* Abordagem de SGBDs versus Abordagem Tradicional
- Abordagem de BD
> Esforço repetido
> Redundância
- O SGBD 
> Permite representar perspectivas diferentes para grupos distintos;
> Caracteristicas
# Abstração, Auto-descrição, Isolamento, Compartilhamento, Múltiplas visão, Transação multiuser;
---
* Natureza Auto-descritiva de Banco de Dados
- Descrição da estrutura e constrains
- DB schema
- Metadados e Schema
---
* Isolamento Program/data e Abstração
- Abordagem tradicional
> Modificação acarreta em reestruturação
- Abstração e Transparência;
---
* Suporte à Múltiplas Visões dos Dados
- Views (Você pode concatenar 2 ou mais tabelas em uma view, ou selecionar apenas dados específicos de uma tabela para fazer parte da view);
---
* Compartilhamento de dados e processamento de Transações Multiusuários
- Concorrência
- Múltiplo acessos
- OLTP (Sucessão de operações, uma série de operações)
> Gerenciador: transações concorrentes;
> Execução sem interferência
> Operacional, Processamento de dados
> Ambiente operacional
- OLAP
---
* Abordagem de banco de dados - Quais são os Atores em Banco de Dados
- Atores
> Design
> Manutenção
> Usabilidade
> Designer
> Administrador
> Usuários Finais
# Casuais
# Ingênuos
# Sofisticados
# Standalone
---
* Workers em background - Banco de dados
- Background
> Designer do SGBD;
> Implementação do SGBD;
> Pessoal de operação e manutenção;
> Desenvolvimento de ferramentas;
---
* Vantagens de Utilizar a Abordagem de SGBDs
- Abstração
- Isolamento
- Controle de Redundância
- Restrição de acesso
- Storage persistência e estrutura
- Backup e Recovery
- Controle de Redundância
> Desnormalização
- Restrição de acesso
> Subsistema secundário
- Storage prove persistência e estrutura
> Provendo persistência
> Caching
> Buffering
> Indexação
- Backup e Recovery
> Perfil de usuário
- Integridade de dados
> constraints
> Inferência
> Ação com regras
> Triggers
---
* Ganhos em utilizar SGBDs
- Entre databases dentro da organização
- Padronização
> Estrutura definida
> Tipos de dados
> Base dos relatórios
- Redução de tempo no desenvolvimento da aplicação
- Flexibilidade
- Time
> Adicionar ano que cursou matéria
> Adicionar coordenador
- Disponibilidade de update imediato
- Economia de escala
---
* Quando não usar SGBDs
- Custo de overhead
- Custo-benefício
- Custo
> Investimento inicial
> Generelidade na definição e processamento
> Segurança, controle de concorrência, recovery, funções de integridade
- Não use um canhão para matar uma formiga
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EfdP8l5MJvRAmiZFTHypmeQBvVQrq0eWF21fgwJW4mO_qA?rtime=BIW44C-d20g
---
-----------------------------------------------
-----------------------------------------------
Modelagem de Dados para Banco de Dados
---
* Introdução à Modelagem de dados - Parte 1
- Modelagem
> Software, Dados..
> Possui foco na representação do contexto
> Mini-mundo, Alto nível, Esquema, SGBD;
> Esquema
# Facilita a compreensão do contexto dos dados;
> Entidade-relacionamento, UML
> Entidade, Atributo, Relacionamento, 
> Um leigo consegue visualizar melhor como funciona a estrutura
---
* Introdução à Modelagem de dados - Parte 2
- Linguagem declarativa
> insert, select
- id garante que não ocorram;
- Definir relacionamento;
---
* Instalação do MySQL no Windows
---
* PostgresSQL Windows
---
* Instalação do MySQL no Ubuntu
---
* Instalação do PostgresSQL no Ubuntu
---
* Explorando Comandos básicos SQL
- SHOW DATABASES;
- CREATE DATABASE nome_do_banco
- USE nome_do_banco
- SHOW TABLES;
- DROP DATABASE nome_do_banco
- CREATE TABLE nome_da_tabela(
    id INT AUTO_INCREMENT,
    nome VARCHAR(250) UNIQUE
  )
> UNIQUE é para não ter redundância;
- ALTER TABLE nome_tabela ADD CONSTRAINT fk_nome FOREIGN KEY (id) REFERENCES nome_tabela2(id);
> Adicionando constraints
- INSERT INTO nome_tabela (colunas) values(valores);
- SELECT * FROM nome_tabela
- DDL: Linguagem de manipulação usada pelos admins
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EfdP8l5MJvRAmiZFTHypmeQBvVQrq0eWF21fgwJW4mO_qA?rtime=22yY6-id20g
-----------------------------------------------
-----------------------------------------------
Arquitetura de Banco de daddos
---
* Arquitetura BD: Modelos
- Data model
- Abstração
- Essencial
- Classificação
> Especialista
# Modelos de dados físico
> Generalização, especialização
> Modelo entidade, relacionamento
> Representacional
> Modelos de dados auto-descritivo
---
* Arquitetura de BD: Esquema, Instâncias e Estados de um BDs
- Esquema
> É a Base geral
> Diagramas
> Descrição
> Entidades dentro de esquemas são denominados Construct
- Snapshot
> Mudança de estado
# Estado inicial
# Estado válido
- Metadados
---
* Three-Schema Architecture
- Arquitetura
> Aplicações de Usuário
> Físico BD
> Modelo de implementação
# entidades, operações de usuário, constraints, relacionamentos
> Modelo conceitual
> O isolamento entre o nivel interno e externo não é explicito
- Interdependência de dados
> Lógica 
> Física
---
* Linguagens para SGBD
- DDL - Data Definition Language
- SQL
- SDL
- VDL
- DML
> Alto nível | Não procedural
> Baixo nível | Procedural
> Se preocupa com o que recuperar e não como recuperar;
---
* Interfaces de SGBDs
- Web Clients
- App Mobile
- Forms
> Preenchimento total ou parcial
- GUI
> Interface gráfica de usuário / interface: Diagrama
- NLI
> Busca pela palavra reservada e conteúdo
> Interpreta a linguagem natural
- Pesquisa Keyword
> Macth: palavra/doc
- Speech input/output
> Contexto limitado
- Interfaces
> Naive
# Operações repetitivas
> DBA
# DBA Staff
---
* Ambientes e utilities de SGBD
- Componentes
> Esquema
> Software
> Modularizado
> Info de módulos
> Acesso ocasional
> Runtime database processor
> Buffering e caching
- Utilities - Gerenciamento
> Monitoramento
> Reorganização do storage
> Backup
> Loading
- Ferramentas e aplicações
> Data dictionary system
> DB Designer
---
* Arquitetura Modelo Cliente-Servidor
- Arquitetura
> Arquitetura Física Centralizafa
> Model
# Provedor de serviços
> ODBC Driver
> JDBC Java
> Arquitetura lógica e física cliente/servidor
# Two-tier
> Arquitetura lógica cliente/servidor
# Three-tier
---
* Classificação de SGBDs
- Classificação, Parametros
> Modelo de dados
> Nº de sites
> Custo
> Tipo de caminho de acesso
# Nome file
> Performance
# OLTP
- Classificação - Relacional
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EfdP8l5MJvRAmiZFTHypmeQBvVQrq0eWF21fgwJW4mO_qA?rtime=4YToAbKe20g
-----------------------------------------------
-----------------------------------------------
Fundamentos de Modelagem e Projeto de Banco de Dados
---
* Discursando sobre as características de um Banco de Dados
- Objetivo Geral
- Caracteristicas
> Gerenciamento e manuteção de dados
- Mundo Fechado
> Preposição
> Predicado
---
* Mundo Fechado e mini-mundo
- Munco Fechado
> Completude
- Mini-mundo
> Mundo Real
> Modelo Lógico
> CWA
> Conceito fechado
---
* Álgebra Relacional
- É uma Linguagem formal para consulta/extração de dados
- Teoria dos Conjuntos
> Conjuntos de operações
> Conjuntos de funções
---
* Álgebra Relacional e Projeto de Banco de dados
- Álgebra Relacional
> Resultado de ação
> Retira a dependência da aplicação de dados
- Tradeoff (Dilema)
> Insert
> Clock do sistema
> Disponibilidade de tempo de gravação
- Processo
> Projeto conceitual, físico,
> Produção
> Projeto lógico
> Validação
> Manutenção
---
* Falando sobre Modelagem
- Modelagem de dados
> BD particular, Softwares , Queries e updates
> Design, Implementação, Teste
- Desenvolvimento
> Disign de BDs, Engenharia de software;
> Não enrijeça o processo
> Planejar, Fazer, Checar, Agir
---
* Projeto: Como "nasce" um Banco de Dados
- Desenvolvimento
> Como implementar um BD
# Entender o contexto e requisitos
# Perfil
# O que eu quero representar?
> Implementação
> Modelo
> Arquitetura
> Funcionalidades
- Cenários
> Colaboradores
> E-commerce
> Universidade
> Produção
> Bacon (Financeirpo)
> Farmácia
> Bibliotecas
- Desenvolvimento
> Como resolver? 
# R:Modelagem
---
* Design de BDs - Projeto Conceitual
- Projeto Conceitual
> Linguagem de modelagem de dados
# Gráficas
# Textuais
# Adendo: Existem 3 formas de criar um algoritmo
# Objetivo: Representar
> 1º passo
# Coleta de dados
# Análise
> Esquema Conceitual
# Modelo entidade Relacionamento
# UML - Diagrama de classes
> Requisições funcionais
# Foco no engenheiro de software
> Modelo de Alto nível
# Requisitos Funcionanis
# Requisitos Não Funcionanis
# Não tem compreenção de como será armazenado
> Dados e requisitos
# Coletados e Analisados
---
* Exemplificando o Projeto Conceitual e Processo
- Projeto Conceitual
> Análise das queries
> Design Conseitual
> Conceitos de Alto Nível
- Processo
> Projeto Conceitual => Lógico => Físico
---
* Implementação: Projeto Lógico e Físico
- Projeto lógico
> Descrição do modelo conceitual
> Depende do modelo do banco de dados
> Tabelas => Estrutura => Organização dos dados
> Mapeamento
> Percurso
> Criação do esquema lógico
> Mapeamento ER para Modelo Relacional
# Entidades
# Relacionamento 
# Atributos
- Projeto Físico
> Parametros físicos
# Estrutura e índices
# Organização e caminhos de arquivos
# Segurança, performance
> Alocação de memória
> Particionamento de tabelas
---
* Fases de desenvolvimento de BDs e Aplicações
- Desenvolvimento
> Levantamento de Requisitos
# Premissas
# Privacidade
> Implementação
> Validação e Teste
- Aplicações
> OLTP
> OLAP
> HTAP
---
* Aplicação: Modelagem de dados
- DER
- Company
- Descrição do mini-mundo
- UML
- DR
- Instâncias
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EQuIhWS1bllGrr4XgGQ0SnwBRsNfBrJM5Ol1HFzdkVb4YQ?e=2mQewM
-----------------------------------------------
-----------------------------------------------
Modelo de Entidade Relacionamento com Banco de Dados
---
* Modelo ER: Tipos de Entidades, Chaves e Atributos
- Processos
- Modelos ER
> Modelo conceitual
# Atributos, Relacionamentos, ...
- Diagrama ER
> Raras modificações
> Facilidade de manipular
> Esquema ER do banco de dados
> Foco no esquema
- Entidades
> Componente básico
> Existencia independente
> Atributos
> Entidades
> Objetos
- Atributos
> Características/Descrição das entidades
> Atômicos
> Compostos
# A estrutura acaba variando
> Multivalorados
# Mais de um dados concatenado
> Stored/Derivados
> Nulos
# Opcional
- Entidades
> Tipo
> Coleção (instâncias)
> Esquema
> Elementos DER
# Entidades
# Atributos
# Chave
---
* O que é a Entidade Fraca no modelo ER?
- Entidade Fraca
> Chave não obrigatória
> Dependência
> Exclusão cascata
---
* Exemplo de modelo conceitual - Company
- Exemplo - Company
> Atributo composto
> Refinamento
---
* Relacionamentos, Papéis e Constraints estruturais
- Relacionamentos
> Classificado
# Grau: Binário, Ternário
# Auto-relacional ou não
# Cardinalidade
> Relacionamentos com Atributos
> Papel | Atribuição
> Auto-relacionamento
---
* Constraints de Relacionamentos Binários
- Constraints - Cardinalidade
- Constraints - Participação
- Atributos de relacionamento
> Decisão subjetiva de Design
> Madatório
---
* Tipos de Entidades Fraca
- Entidade Fraca
> Tipos de entidades
# Fracas 
## Depende de outra
## Representada por um retângulo
# Fortes
- Notações
> Atributo derivado
> Atributo composto
- Construtures do Esquema
> Convenção - Nomeando
---
* Refinando o design ER para Company
- Exemplo - Company
- Refinando - Company
> Relacionamentos
---
* Alternativas - UML
- Outras Notações
> Linguagem para desenvolvimento de software
> Trabalha com visões: interpretada e construída
> Compreensão facilitada
> Liberdade para o desenvolvedor
> Orientação a objeto
> Principais diagramas
# Casos de uso
# Classe
# Interação
> Associação binária
> Associação reflexiva
> Multiplicidade *
> Relacionamentos
# Associação
# Agregação
---
* Relacionamentos de Alto Grau
- Ternário, ..., N-ário
- Perspectiva diferente do binário
- Instancias refletem a visão
- Relacionamento N-ário
> Supplier
> Supply
> Project
> Part
---
* Exemplificação de Relacionamentos N-ário - Consulta médica
- Ternário
- Agregação
---
* Exemplificação Relacionamentos N-ários - Curso e Entrevista
- O Relacionamento mais usado é o Ternário
---
* Materia: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EQuIhWS1bllGrr4XgGQ0SnwBRsNfBrJM5Ol1HFzdkVb4YQ?rtime=0r0zeomf20g
-----------------------------------------------
-----------------------------------------------
Modelo Relacionamento de Entidade Aprimorado com Banco de Dados
---
* Modelo EER
- Modelo ER - 1970
- EER: Novos conceitos semânticos
- Desenvolvidos fora da área de BDs
- Diagrama ERR
- Entidades => Objeto
- Herança
- Superclasses
> Generalização
- Subclasses
> Especialização
- Tipos de entidades
- Conjuntos de entidades
- Subclasse e subtipo
- Classe Mãe: Superclass
- Classe Filha: Subclass
---
* Herança
- Permite criar uma nova classe a partir de uma já existente
---
* Especialização e generalização
- Especialização: Subclasses
- Cunjunto de subclasses: tipo de entidade
- Diferenciação: propriedades e atributos específicos
- Instâncias
- Mesma representação de mundo real
- Papel especializado
- Motivação
---
* Generalização versus Especialização
- Modelo Enhanced ER
- Generalização
> Inverso da especialização
> Propriedades comuns as entidades
---
* Constraints de Generalização e Especialização - parte 1
- Constraint:
> Predicated-defined (condição)
> Attribute-defined Specialization
> User-defined
> Disjointness constraint
> Overlapping
> Completeness constraint
> Regras
# Deletar
## Superclasse -> subclasses
# Inserçao
## Entidade em superclasse -> predicated-defined
## Entidade em superclasse com total -> subclasse macth
---
* Hierarquia e Rede de Especialização
- Hierarquia de Especialização
> Uma subclasse não pode ter mais de uma superclasse
- Rede de Especialização
> Uma subclasse pode ter mais de uma superclasse
> Herança múltipla
# Subclasse compartilhada
# Algumas linguagens não suportam
# Preferivel hierarquia de especialização
---
* Modelagem de Union Types usando Categoria
- Union Type
> Tipo de relacionamento que visa mesclar entidades diferentes
> Categorização
---
* Esquema EER e Definições formais
- Departamento
- Atributos
---
* Decisão sobre Design de BD e UML
- Decisões de Design
> Guideline
# Sub/Superclasses: Acurácia x Desordem
# Merge de subclasse em uma superclasse: relacionamentos e poucos atributos
# Union Types: evitados por padrão
# Escolhar guiadas por mini-mundo
- Representando por UML
> Foco na modelagem de dados
> Diagrama de classes
> Classes concretas (igual as classes abstract de POO)
- UML > Especialização
---
* Terminologias Alternativas - Parte 1
- Knowledge representation (KR)
> Representação do conhecimento
> Ex: Corretor ortográfico
- Ontologia
> É o ramo da filosofia que estuda conceitos como existência, ser, devir e realidade.[3][4] Inclui as questões de como as entidades são agrupadas em categorias básicas e quais dessas entidades existem no nível mais fundamental. A ontologia é às vezes referida como a ciência do ser e pertence ao maior ramo da filosofia conhecido como metafísica.
> Domínio
> Alimenta o BD com informações sobre o domínio, suas propriedades lógicas
> Conceitos abstratos
# Classificação
# Identificação
# Especialização e Generalização
# Agregação e Associação
> Thesaurus: Relacionamentos x conceitos
> Taxonomy: Relacionamento de conceitos com estruturas
> Esquema detalhado: Descrição de conceitos
> Lógica teórica: Lógica matemática para definição de conceitos
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/EQuIhWS1bllGrr4XgGQ0SnwBRsNfBrJM5Ol1HFzdkVb4YQ?rtime=dXi7RBuh20g
---
-----------------------------------------------
-----------------------------------------------
Modelo Relacional e Mapeamento Relacional com Banco
---
* Conceitos de Modelo Relacional: Tupla, Atributo e Relação - Parte 1
- Conceitos formais do Modelo Relacional
> Modelo Relacional: Colesão de Relações
> Tabelas X Arquivos
> Entidade
> Domínio
> Tupla (intância da tabela)
> Atributo
> Relação
> Valores atômicos
> Grupos: especificando nomes
---
* Conceitos de Modelo Relacional: Tupla, Atributo e Relação - Parte 2
- Esquema Relacional
- Relação é uma descrição de uma tabela
- Ai: atributo
- D: domínio
- Prefira varchar
---
* Conceitos de Modelo Relacional: Cardinalidade, Domínio e Relação
- Cardinalidade
- Total de instâncias
- Produto catesiano
- Tudo é formado atravéz de equações
- Domínio
- Papel (Role)
- Características da Relação
> Relação
> Arquivos
> Tabelas
> Ordenação de Tuplas na Relação
---
* Conceitos de Modelo Relacional: Conjunto de Tuplas
- Lista de tuplas - Ordenação
- Conjunto de tuplas - Nível Abstrato
> atributo, valor
- Ordenação de valores dentro da Tupla
---
* Conceitos de Modelo Relacional: Valores Nulos
- Valores Nulos
> Valor desconhecido
> Valor existente mas indisponível
> Atributo não se aplica
> Valor indefinido
> Valores nulos nas tuplas
- Significado de Relação
> Afirmação
> Predicado (Formado por um ou mais verbos, é aquilo que se declara sobre a ação do sujeito, concordando em número e pessoa com ele.)
> Preposições (É equivalente as instâncias)
---
* Lógica de predicado dentro do mundo de SGBDs
- Lógica de Predicados
> Afirmações declarativas
> Validade de Argumentos
- Uppercase: Relações = Q, R, S
- Lowercase: Estado de Relação - q, r, s
- Letras: Tuplas
---
* Constraints do Modelo Relacional
- Composição do mini-mundo
> Relações
> Constraints
- Categorizadas
> Inheret Model-based Constraints
# Caracteristicas das relações
> Schema-base Constraints
# DDL
> Application-base Constraints
> Dados do Contexto de Banco de Dados
- Dependências de dados
- Dependências funcionais
---
* Constraints Baseadas no Esquema do Banco de Dados
- Constraints de Domínio
> Integer
> Float
> Time
> Strings
> Integer
> Timestamp
> Date
- Constraints de Chave
> Uniquenness constraints
> Chave primária e candidata
> Valores nulos em atributos
- Uniqueness Constraint
> Subconjunto de atributos
> Chave e Superchave
> Chave candidata
---
* SGBDs e Esquemas Relacionais
- Esquema relacional
> SGBD é um subconjunto de relações
> Estado de um SGBD relacional
> Domínio e Conceito
> Restrições de integridade
# DDL - Data Definition Language (Create, Drop, Insert, Rename...)
# DML - Data Manipulation Language (Insert, Update, Delete, Merge)
# DCL - Data Control Language (Grant, Revoke)
# DQL - Data Query Language (Select)
- Estado SGBD - Company
- Integridade
> Constraints de Integridade
> Constraints de domínio, chave, Not Null
> Integridade de entidade
---
* Integridade Referencial de Entidade e Chaves Estrangeiras
- Integridade
> Cheve Primária != NULL
> Consistência entre entidades
> Integridades referencial
- Chave estrangeira
- Outras constraints
> Constraints - semânticas
# Salário máximo do supervisor
# Carga horária
---
* Mapeamento ER - Relacional
- Mapeando
> Design Lógico do Projeto
- Projeto Lógico
- Algoritmo de Mapeamento
> Referência
> Relação
> PK - Simples ou Composta
> Unique Constraint
> FK - Foreign Key
> Entidades Fortes
- String Entity Mapping
> Relação Entidade - Entity Relation
> Entidades Fracas (Dependências)
---
* Mapeamento de Relacionamentos Binários 1:1
- Algoritmo de Mapeamento
> Foreign Key
> Merge dos relacionamentos
> Cross-reference
> Relacionamento Binário 1:1
> Participação Total
> Abordagem FK
> PK de S -> FK em T
> Relacionamento Total
> Merge
---
* Mapeamento de Relacionamentos Binários 1:N
- Abordagens:
> Foreing Key
# Possui um lado definido no gráfico
> Relationship relarion
> Relacionamento Binário 1:N
---
* Mapeamento de Relacionamentos Bináriso N:M
- Algoritmo de Mapeamento
> works_on
# Entidade Fraca
- Mapeando aributos para o Modelo Relacional
> Algoritmo de Mapeamento
> Abordagem
# Componentes simples
> Atributos Compostos
> Atributos Multivalorados
---
* Mapeamento de Relacionamentos N-ários
- Modelo ER
> Atributo Simples...
- Modelo Relacional
---
* Mepeando os componentes do EER - parte 1
- Algoritmo de Mapeamento
> Especialização
# Única tabela
# Multiplas tabelas
> Superclasse e subclasse
> Multiplas relações
> Multiplas relações - Sub/superclasse
> Multiplas relaçõe Subclasse apenas
---
* Mapeando os Componentes do EER - parte 2
- Algoritmo de Mapeameno
> Relação única - 1 tipo de atributo
> Atributos de tipo
> Relação única - Múltiplos atributos Type
> Multiplos Atributos de tipo
> Mesmo atributo chave
> Herança multipla
> Union Type
> Chave substituta
> Chave Primária
> Chave Estrangeira
---
* Estudo de caso: Mapeando o Esquema Conceitul (ER) para Relacional Dentro do Contexto de Ordem de Serviço
---
* Material: https://academiapme-my.sharepoint.com/personal/renato_dio_me/_layouts/15/Doc.aspx?sourcedoc=%7B08fbb726-433e-4df0-9084-9d8c9317b0a6%7D&action=default&slrid=881ed3a0-904f-4000-1c3c-de8ef7cc80d3&originalPath=aHR0cHM6Ly9hY2FkZW1pYXBtZS1teS5zaGFyZXBvaW50LmNvbS86cDovZy9wZXJzb25hbC9yZW5hdG9fZGlvX21lL0VTYTMtd2ctUV9CTmtJU2RqSk1Yc0tZQm1MUE1LUU5INTFKcksxY1ZyOVA4Y2c_cnRpbWU9dnN2ZmltMmoyMGc&cid=ce8351d4-f29e-42ff-a51f-c03ad7a42363&_SRM=0:G:61&file=M%c3%b3dulo%203%20-%20Explorando%20a%20Linguagem%20de%20Consulta%20a%20Banco%20de%20Dados%20SQL%20%e2%80%93%20Structured%20Query%20Language.pptx
-----------------------------------------------
-----------------------------------------------
Primeiros Passos com SQL
---
* Introdução ao SQL
- Explorando a SQL
> Linguagem para manipulação de dados
> Execução de operações
> Modificação de dados e estrutura
> Adicionar, remover ou atualizar linhas
> Recuperação de um subconjunto de informações do bando de dados;
---
* Sublinguagens: Classificação de SQL - DDL
- Classificações:
> DDL - Data Definition Language
# CREATE, DROP, ALTER
# INSERT, UPDATE, DELETE
# RENAME, TRUNCATE, MERGE
# Usuário, Esquema, Statements, Indexing
---
* Explorando um Primeiro Exemplo utilizando DDL
---
* Primeiro Contato com SQL e MySQL
- show databades; (Mostra todos os bancos)
- show schemas; (Mostra todos os bancos)
- drop database nome_do_banco;
- desc nome_do_banco;
---
* Considerações sobre o ambiente do SGBD
---
* Criando meu Primeiro Esquema no MySQL - parte 1
---
* Criando meu Primeiro Esquema no MySQL - parte 2
---
* Populando o Banco de Dados do Meu Primeiro Exempo
---
* Continuando com as Classificações(DML, DCL e DQL), Statements, Cláusulas, Termos e Esquemas;
- Introdução ao SQL
> Classificações
# DCL - Data Control Language
# DQL - Data Query Language
> Statement
# Comando/instruções
# Reconhecido pelo BD
# Retorno: registro de dados
> Cláusulas SQL
# Função -> Instrução
# Algumas são obrigatórias
# SELECT now(); (Não necessita do FROM)
# SELECT, FROM, WHERE, ORDER BY, GROUP BY, HAVING
> Termos - SQL
# Identificador
# Operador
> Contante
> Expressão
> Modelo Relacional
> Modelo ER
---
* Definindo o Esquema de COMPANY Com SQL
---
* Tipos de dados no MySQL
- Fixo: 255 bytes
- Variável: 65.535 bytes
- Char, Varchar
- Texts types
- Conjunto de caracteres
> Alfabeto, Portugues, inglês
- Text data
> < 65KB
- Dados numéricos
- Dados temporais
---
* Constraints: Especificando Restrições em SQL
- Constraint
> NOT NUL
> PK e SK
> Default
# Valor
> Check
# Domain
> Delete
# Comportamento
> Primary key
> Unique
> Create table
- Violação de Constrints
> Referencial Triggered
> Nomear
> Check
> Row-based
---
* Queries/Insertion com SQL
- SQL Queries
> Comportamento
# Multiset - not set
# Duplcações (Redundâncias)
# Custoso - Melhor previnir
# Distinct
> Mapping
# Projeção de atributos
> Operadores
> DML
# Subconjunto do SQL
# Mais utilizado
# Comandos: insert, ...
# NULL e NOT NULL
---
* Adicionando constraints ao nosso Banco de dados
---
* Adicionando constraints ao nosso Banco de dados com Alter Table
---
* Persistindo informações no banco de dados Employee
- Da para inserir mais de um registro de uma vez usando insert into
---
* Recuperando dados com Queries SQL
---
* Nomes, Aliasing e Variação de tuplas
- Identificando a tabela
- Nomes de atributos
> Ambiguidade
> Diferenciar atributos
- Renomeando atributos
> Nomenclatura diferente
> Referências múltiplas
---
* Realizando Queries com Alias
- Alias (Ex: nome_tabela as t) Retira ambiguidades é um apelido que se cria para o nome das tabelas
---
* When Good Statements Go Bad (Quando os nossos bons stados vão mau)
- Problemas
> PK e FK inexistente
> Conversão inválida
---
* MySQL e PostgreSQL e suas diferenças
- Postgresql
> Otimizado para aplicações complesxas
> Grande volume de dados \ informações críticas
> E-commerce
- MySQL
> Possui agilidade e versatilidade
> Operações mais simples
> Processamento e tempo curto de resposta
> Site | Fórum | Portal
- Ponderação
> Precisa de Rollback? MySQL não possui Enterprise
> Precisa de agilidade? Use MySQL
> Fácil utilização MySQL
> Operação mais simplificada Use MySQL
---
* Materiais de Apoio: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/ESa3-wg-Q_BNkISdjJMXsKYBmLPMKQNH51JrK1cVr9P8cg?rtime=lsz5c4Cm20g
* Links Úteis:
- https://web.dio.me/articles/passo-a-passo-de-instalacao-do-mysql-no-windows?back=%2Farticles&open-modal=true&page=1&order=oldest
- https://www.mysql.com/
- https://www.postgresql.org/
- http://sqlfiddle.com/
- https://www.w3schools.com/sql/
- https://sqlzoo.net/
-----------------------------------------------
-----------------------------------------------
Explorando Queries com SQL
---
* Explorando os Comandos de DDL - Data Definition Language
- DDL - Data Definition Language
> UPDATE: Modificação a partir de uma condição
> DROP: Remoção de estruturas
> DELETE: Remoção de registros
> ALTER: Modificação da estrutura do BD
---
* Manipulando o BD com comandos da DDL
---
* Elaborando queries SQL com Expressões
- Expressões
> Atributos aritméticos
> Operações
> Operações matemáticas
> Tipos de dados: string e númerico
> Armazenamento: dados simples
> Resultado de expressões: dados complexos
> Plus: utilizar alias
- Concatenando Strings
> Use || STATE AS novo_nome_para_a_coluna_unificada
- Expressões - Strings
---
* Submetendo Queries SQL com Expressões ao Banco de dados
- concat(col_1, " ", col_2)
---
* Introdução a operações de conjuntos com SQL
- Like | Between
> Comparação
> String Matching
> Caracteres especiais: % e _
> Strings
# 'AB_CD%EF'
# "->""
> Intervalo
> Numérico
---
* Mais Expressões e Operações de Conjuntos
---
* Utilizando operadores Lógicos Like e Between
---
* Exemplos de mais operadores lógicos
---
* Comandos baseados em operações matemáticas: UNION, INTERSECTION e EXCEPT
- Union: União dos conjuntos sem redundancias
- Union ALL: Retorna inclusive as redunancias
> Só pode ser aplicado se as duas tabelas tiverem a mesma estrutura
- Intersect: Retorna só os elementos iguáis nos conjuntos
- Except: Quais elementos que estão em um conjunto especifico
---
* Vendo na prática como funciona as operações matemáticas com SQL
---
* Nested Queries (Subqueries) com SQL - Parte 1
- Comparação por atributos buscados
- Nested Query - Consulta aninhada
- Consulta externa e interna
- SELECT, FROM, WHERE
- IN -> Comparação com set
- Keywords
> ANY, SOME, ALL
- Operadores:
> >, >=, < <=, and <>
- Quando as colunas tem o mesmo nome é necessário usaro o alias (as) (apelido)
---
* Nested Queries (Subqueries) com SQL - Parte 2
- Exists: True se o resultado da consulta aninhada contiver pelo menos uma tupla
- Not Existis: True se o resultado da consulta aninhada não contiver tuplas
- Unique: retorna TRUE se único
- Conjuntos Explícitos
---
* Criando subqueries para recuperar informações no banco de dados
---
* Segundo exemplo de utilização de Subqueries SQL
---
* Utilizando Existis, Unique e comparação com conjuntos explícitos em Queries SQL
---
* Materiais de apoio: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/ESa3-wg-Q_BNkISdjJMXsKYBmLPMKQNH51JrK1cVr9P8cg?e=OLpbch
---
-----------------------------------------------
-----------------------------------------------
Criando Queries com Funções e Cláusulas de Agrupamentos
---
* ORDER BY: Cláusulas de ordenação com SQL
- Ordenação em Queries SQL
> ORDER BY
# Cláusula SQL
# Ordenação por coluna
# Expressões baseadas em dados
# + de um valor
> Ascendente
> Descendente
> Definição formal
# A tupla deve conter a condição definida no WHERE
---
* Ordenação com SQL utilizando expressões
- Classificação de dados
> DESC, ASC
---
* Aplicando Ordenação as Consultas de Banco de Dados
---
* Funções de agregação com SQL
- Agrupamento de Registros 
> Agregar, Aglutinar, Agrupar
> COUNT: registros
> SUM: somatório
> MIN: valor mínimo
> MAX: valor máximo
> AVERAGE 
> HAVING
---
* GROUP BY: Cláusulas de agrupamento com SQL
> Agregar, Aglutinar, Agrupar, os grupos, tributos informações;
> Atrubutos de Relacionamentos
> Grupos de valores
---
* Agrupando registros no Banco de Dados
- avg(coluna) Retona a média da coluna
- round() Aredonda
---
* Explorando cláusulas de agrupamento com SQL
---
* Entendendo o HAVING Statement
- Condição para agrupar
- Filtragem dos grupos
- Condição sobre a informação sobre o grupo
- Estrutura padrão caso todas as condições estivesem inseridas na Query SQL:
###
SELECT <attribute and function list>
FROM <table list>
[WHERE <condition> AND <condition2>]
[GROUP BY <grouping attribute(s)>]
[HAVING <group condition>]
[ORDER BY <attribute list>]
###
- Prestar atenção na preferência(ordem) de execução das cláusulas
---
* Aplicando a cláusula HAVING ao Banco de Dados
- Tuplas (linhas da tabela)
---
* Review: Reforçando a diferença entre ORDER by e GROUP BY
- Diferença entre ORDER BY e GROUP BY
> ORDER BY ordena conforme os atributos da linha 
> GROUP BY agrupa os atributos iguais e ordena, pode ser usado mais de uma vez
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/ESa3-wg-Q_BNkISdjJMXsKYBmLPMKQNH51JrK1cVr9P8cg?rtime=N6oMCDyn20g
---
-----------------------------------------------
-----------------------------------------------
Agrupando Registros e Tabelas com Join Statement
---
* Case statement
- Troca de um valor 
- Condição para troca
- Mapeamento de valores de correspondências
- CASE, when, then, end
> Não se utiliza sózinho
---
* Agupamentos com CASE
---
* O caso zero/null trick
- Filtros - valores distintos
- SELECT QUERY
- CASE Statement
> MAX, AVG, MIN
> NAD, OR, NOT
> COUNT
---
* Criando Queries com CASE statement
- Desabilitar o Safe mode
---
* Entendendo Queries de múltiplas tabelas com JOIN
- JOIN Statemant
> Quando não especifica a conjunção de junção é CROSS JOIN:
###
SELECT <atributes list>
FROM <table1> ft JOIN <table2> st;
###
> INNER JOIN:
###
SELECT <attributes list>
FROM <table1> ft INNER JOIN <table2> st
ON ft.commom_attribute = st.commom_attribute;
###
---
* Queries com INNER JOIN
- Falha: linhas excluídas
- INNER JOIN
> Mais comim dos JOINs
> Linhas não correspondentes excluidas
> Atributo de junção
> Mesclar tabelas
> 1+atributos junção
> 2 + Tabelas
> ON
> USING (atributo com o mesmo nome)
> Usar atributos em comum entre as tabelas
> Não vai mostrar o que não der Match entre as duas tabelas
---
* Aplicando JOIN statement ao cenário Employee
- Os attributos precisam ser do mesmo tipo
---
* Agrupamento com mais de duas tabelas e JOIN
- 3 ou + tabelas com JOIN
---
* Criando uma Query SQL com JOIN entre três tabelas
- A princípio a diferença entre CROSS e INNER JOIN é que o CROSS não tem uma especificação de ON ou USING
- HAVING aplica uma condição em cima do Grupo
---
* A ordem importa em queries JOIN
- Não o próprio SGBD vai entender como executar uma query
- SGBD interpreta e escolhe a sequência de comandos
- SGBD escolhe um ponto de partida
- Tem como especificar a ordem para o SGBD usando STRAIGHT_JOIN (Forçando ordem de junção)
---
* Nested (Subqueries) com JOIN Statement
- Subqueries COM JOIN
---
* Self JOIN: Mesma tabela em uma Query JOIN
- JOIN Statement
> Chave estrangeira referenciando a mesma tabela
---
* Comparando condições de junção e Filtros
- JOIN Statement
---
* Como utilizar o OUTER JOIN Statement
- OUTER JOIN
> Linhas sem correspondencias não eram exibidas
> Valores de ambas tabelas
> Matchs nas tabelas
> O que acontece OUTER JOIN:
###
SELECT <atributes list>
FROM <table1> ft OUTER JOIN <table2> st
ON ft.commom_attribute =
st.commom_attribute
###
> LEFT e RIGHT JOIN
---
* Quando aplicar o LEFT JOIN ou OUTER JOIN
- Apresentam valores que não são mostrados no INNER JOIN
---
* Entendendo melhor os tipos de JOINs
- INNER ou OUTER JOIN?
> A tabela referenciada modifica o resultado da query
> JOIN
> FULL JOIN
> LEFT JOIN
> RIGHT JOIN
> INNER JOIN
# JOIN (Intersecção)
# LEFT JOIN (Tudo que tem na esquerda e o que combina na direita)
# RIGTH JOIN
> FULL OUTER JOIN 
# FULL OUTER JOIN
# LEFT OUTER JOIN
# RIGHT OUTER JOIN
# ANTI OUTER JOIN (Os elementos que não combinam nas tabelas)
---
* Explorando ainda mais NATURAL JOIN
- Condição de junção implícita
- Atributos comuns (com o mesmo nome)
---
* Referências para estudo
- Livros:
> Sistema de Banco de Dados
> Learnin SQL
> Database modeling and design
> Getting Started with SQL: A Hands-On Approach for Beginners
---
* Material de apoio: https://academiapme-my.sharepoint.com/:p:/g/personal/renato_dio_me/ESa3-wg-Q_BNkISdjJMXsKYBmLPMKQNH51JrK1cVr9P8cg?rtime=FeESK8uo20g
-----------------------------------------------
-----------------------------------------------
Construindo seu Primeiro Projeto Lógico de Banco de Dados
---
* Apresentando o Desafio de Projeto Lógico para Banco de Dados
- Depois Refinar como mostrado no módulo de modelagem de banco de dados usando entidade relacionamento
- Desafio de Projeto
> 1. Mapeamento do esquema ER para Relacional
> 2. Definição do script SQL para criação do esquema de banco de dados
> 3. Persistência de dados para testes
> 4. Recuperação de informações com queries SQL
- E-commerce
---
* Considerações sobre a Variação Esquema ER
---
* Criando esquema Relacional a partir do Esquema Conceitual
- A diferença entre char e varchar é que o varchar vai alocando conforme a necessidade e o char é o tamanho específico
---
* Criando seu Primeiro Projeto Lógico de Banco de Dados
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 1
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 2
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 3
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 4
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 5
---
* Criando o esquema de Banco de Dados - Script SQL - Parte 6
---
* Persistindo e Recuperando Dados a partir de Consultas SQL no Banco de Dados
---
* Entendendo o desafio - Criando e Implementando um Projeto Lógico de Banco de Dados
###
- Desafio de Projeto - Diretrizes
> Após a criação do esquema lógico, realize a criação do 
Script SQL para criação do esquema do banco de dados. 
Posteriormente, realize a persistência de dados para 
realização de testes. Especifique ainda queries mais 
complexas do que as apresentadas durante a explicação do 
desafio.
> Não há um mínimo de queries a serem realizadas;
> Os tópicos supracitados devem estar presentes nas queries;
> Elabore perguntas que podem ser respondidas pelas consultas;
> As cláusulas podem estar presentes em mais de uma query;
> Recuperações simples com SELECT Statement
> Filtros com WHERE Statement
> Crie expressões para gerar atributos derivados
> Defina ordenações dos dados com ORDER BY
> Condições de filtros aos grupos - HAVING Statement
> Crie junções entre tabelas para fornecer uma perspectiva mais complexa dos dados;
> Por no GitHub e submeter para avaliação;
###
---
-----------------------------------------------
-----------------------------------------------
Construa um Projeto Lógico de Banco de Dados do Zero
---
* Já criei o repositório no GitHub:
- https://github.com/Maycon-crz/construindo_um_projeto_logico_de_banco_de_dados_do_zero_no_contexto_de_uma_oficina_dasafio_dio/blob/main/README.md
- Criação do esquema lógico;
- Criação do Script SQL para 
###
Clientes:
ClienteID (INT PRIMARY KEY)
Nome (VARCHAR(45))
Endereço (VARCHAR(255))
Telefone (VARCHAR(45))
Email (VARCHAR(255))
Data de Cadastro (DATETIME)
###
Veiculos:
VeiculoID (INT PRIMARY KEY)
ClienteID (INT FOREIGN KEY REFERENCES Clientes(ClienteID))
Marca (VARCHAR(45))
Modelo (VARCHAR(45))
Ano (INT)
Placa (VARCHAR(45))
###
Ordens_de_servico:
OrdemID (INT PRIMARY KEY)
ClienteID (INT FOREIGN KEY REFERENCES Clientes(ClienteID))
VeiculoID (INT FOREIGN KEY REFERENCES Veículos(VeiculoID))
Data_de_abertura (DATETIME)
Data_de_conclusao (DATETIME)
Status (VARCHAR(45))
Valor Total (DECIMAL(10,2))
###
Itens_de_servico:
ItemID (INT PRIMARY KEY)
OrdemID (INT FOREIGN KEY REFERENCES Ordens de Serviço(OrdemID))
Descricao_do_serviço (VARCHAR(45))
Preco (DECIMAL(10,2))
###
Funcionários:
FuncionárioID (INT PRIMARY KEY)
Nome (VARCHAR(45))
Cargo (VARCHAR(45))
Data de Contratação (DATETIME)
Salário (DECIMAL(10,2))
​###

- Relacionamentos:
> Um cliente pode ter vários veículos, mas cada veículo pertence a um único cliente (relação 1:N entre Clientes e Veículos).
> Uma ordem de serviço é vinculada a um único cliente e a um único veículo, mas um cliente ou veículo pode ter várias ordens de serviço (relações 1:N entre Clientes e Ordens de Serviço, e entre Veículos e Ordens de Serviço).
> Uma ordem de serviço pode ter vários itens de serviço, e um item de serviço está associado a uma única ordem de serviço (relação 1:N entre Ordens de Serviço e Itens de Serviço).
- Atributos:
> Na tabela de Ordens de Serviço, o atributo "Status" pode conter valores como "Aberta", "Em andamento" e "Concluída".
> Os atributos de datas (Data de Cadastro, Data de Abertura, Data de Conclusão, Data de Contratação) podem ser do tipo "datetime" para armazenar datas e horários.
> Este esquema lógico é um ponto de partida e pode ser ajustado de acordo com as necessidades específicas da sua oficina. Certifique-se de identificar todas as informações cruciais para o funcionamento da oficina e defina relacionamentos apropriados para manter a integridade dos dados.
-----------------------------------------------
-----------------------------------------------
Fundamentos de ETL (Extract, Transform, Load) com Python
---
* Prof. Dr. Diego Bruno
---
* Introdução para ETL
- Para modelo de dados que não são padronizados
- Etração, transformação, carregamento
- É um tipo de data integration, usado para combinar dados de diversas fontes. Comumente usado para construir um data Warehouse
- Extract:
> Importar dados de diversos tipos e formatos
> Pasta de trabalho, diversos Bancos de dados, CSV, TXT, JSON, etc.
- Transform
- Load - carregar
> Para o modelo de dados
- Ferramentas
> IBM Information
> Server (Data Stage) ...
- Processo de ETL
> Extração, 
> transformação
# Limpeza ...
> carregamento
> Mapeamento
---
* Etapas para ETL
- Extract
> Se comunicar com outros sistemas
> Capturar dados
- Transform
> Padronização
> Limpeza
> Qualidade
- Load (Carregamento)
> Etapa final
> Ler e carregar os dados no Data Warehouse ou Data Mart Final;
- Vantagens
> Garantia significativa de qualidade dos dados
> Funcionalidade e execução
# Funções específicas;
> Manutenção das cargas
> Performance
# Trabalhar com grandes volumes de dados;
> Transferência
# Deslocamento de uma servidor mas facilmente
> Conectividade
# Multiplas fontes de dados
> Reinicialização
> Segurança e Estabilidade
# Mais modular dividindo as funcionalidades
---
* Ferramentas aplicadas para ETL
- Usados em Data Woarehouse e Busines inteligence
> Facilitar Processos de integração de software, banco de dados, etc...
- IBM DATA STAGE
- Power Center
- SQL Server Integration Services
> Talend ETL
- ETL para BIG Data
> Data Warehouse ou gerando códigos para serem rodados nessas ferramentas do Ecossistema Hadoop
---
* Introdução à Biblioteca Pandas
- É a manipulação de dados estruturada como no exel só que de forma mais avançada
> Sem precisar de planilhas para extruturar, analizando tudo de forma inteligente
- Permite trabalhar com diferentes tipos de dados;
- Estruturas de Dados
> Principais objetos da Pandas: Series e os Data Frames
---
* Biblioteca Pandas e suas funções
- DataFrame
- df.shape (Retorna o volume de informações na questão estrutural)
- df.info (retorna os tipos de dados, volume de dados nulos, e o tamanho)
- Alterações
> Passar o novo conjunto de nomes desejados com a mesma quantidade de colunas existentes no conjunto original
> O Python é case-sensitive
> unique() Retorna valores únicos diferenciando com case sensitive
- Agrupamentos
- Dados estatísticos
---
* Introdução à biblioteca Scikit Learn
- Uma das principais para Machine Learning
- Utilizando a biblioteca
> É possível se comunicar com outras bibliotecas
- Scikit-learn
> Pacote matplotlib
> predict() previsão dos valores
> plot() gera uma reta com os dados
> scatter()
---
* Manipulando Dados com Pandas em Python
- ETL: Manipulando Dados com Pandas em Python
---
* Framework Luigi para ETL com Python
- Ferramenta de código aberto
- É um Framework de execução criado pelo Spotify
- Voltado para criar pipelines de dados em Python
- Tópicos
> Target
> Task
# require()
# output()
# run()
- Pesquisar sobre essa ferramenda de ambiente de desenvolvimento que ele usa:
> https://anaconda.org/anaconda/python
# Criei a conta na plataforma
- Instalação Framework Luigi
> Documentação: https://luigi.readthedocs.io/en/stable
> pip install luigi
> Comando para iniciar o Framework Luigi
# luigid
> URL para acessar a interface gráfica:
# http://localhost:8082
---
* Material de apoio: https://academiapme-my.sharepoint.com/personal/kawan_dio_me/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Fkawan%5Fdio%5Fme%2FDocuments%2FSlides%20dos%20Cursos%2FFundamentos%20de%20ETL&ga=1
-----------------------------------------------
-----------------------------------------------
Introdução ao Machine Learning
---
* Maquinas que pensam como humanos
- Treinamentos de sistemas de IA;
- Tomada de decisão com suporte de base de regras
- Automação
- Como a IA é vista hoje
> IA Geral
> IA Restrita
> Aprendizado de Máquina
> Ficção Científica
# Visão sobre o futuro
# Ex Machina
> Primeiro robô a ter cidadania
# Sophia
- Relação entre ML e AI
> Por meio do ML obtemos (ou não) um IA restrita;
> É necessário passar por um método de Machine learning para obter a IA;
> Aprendizado de Máquina (Treinamento)
# Depende de uma base de dados
---
* Métodos de Machine Learning e suas aplicações
- Exemplo de Aprendizado
> Aprendizado por Reforço
# Recompença caso o resultado for positivo
- Aplicações em Veículos Autônomos
> Pesquisa em Veículos - ADAS
- Sensoriamento: Dados gerados
> Fusão de Sensores para Visão Computacional
- Deep Learning - TensorFlow
> Extração de features 2D
> CNN
- Bibliotecas de ML
> Scikit learn
> Pandas
- COLAB: Ferramenta online de Machine learning
> Para não precisar instalar nada e rodar tudo na nuvem
---
* Machine Learning aplicados em sistemas reais
- Diagrama de blocos do sistema
- Arquitetu de um Carro Autônomo
> Problemas
# Detecção de placas móveis - (rotas não mapeadas)
> Planejamento de rotas
> Atenção visual
# Análise de ambiente de navegação com regras de trânsito em conjunto com o comportamento do condutor
> Funcionamento do Sistema
# Percepção externa + percepção interna
> ADAS
# Máquina de Estados + RNA
# Classificação dos problemas
# ADAS para correção de falhas humanas
> Redes
# Visão 2D CNN Segnet
# Deep Learning - YOLO
# MASK-RCNN Deep Learning
# DeepLAB - Deep Learning
---
* Modelos de Machine Learning para Visão Computacional
- O mundo é visto de forma 3D
- Problemas em Visão 2D
> Avaliar profundidade
> Diferenciar objetos reais e pinturas
- Ética para Sistemas inteligentes
> Avaliar se as decições estão dentro das leis
> Avaliar o grau de prioridade
> Tomada de decisão sem sentimentos
- Aplicações de ML e IA
> Suporte para medicina
# Detectar cancer de mama
# Detectar cancer de pele
> Revolução Industrial
# Industria 4.0
# Robótica industrial
# Robôs de produção
# Robôs colaborativos
- Problemas de IA
> Reconhecer tipos de carne
> Grandes valores
- BIG data
> Análise de grandes volumes de dados
- Sistemas de Recomendação
> Coleção => Armazenamento => Análise => Recomendação
- Suporte para a Medicina
> Relação, previsão
- Vida eterna
> 2045 Avatar project milestones
# 2015 - 2020 (Cópia robôtica de um corpo humano controlada remotamente via BCI)
# 2020 - 2025 (Avatar com um cerebro humano que é transplantado no final da vida)
# 2030 - 2035 (Avatar com um cérebro artificial no qual uma personalidade humana é transferida no final da vida)
# 2040 - 2045 (Avatar semelhante a um holograma)
- Transhumanismo
> Melhoramento cerabral e corporal
- Maquinas que pensam como humanos
> Reabilitação
> Neurocientista brasileiro Meguel Nicolelis
# Aplicações de reabilitação humana - sistemas cognitivos
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/kawan_dio_me/EW4SsQERpldNhGCsFHx9ZnQBvUlqQ8s6IEjk51gDDTANug?e=WKJag5
-----------------------------------------------
-----------------------------------------------
Métodos de Machine Learning Bioinspirados
---
* De onde veio a idéia de ensinar uma máquina?
- Vem do raciocíneo humano
- Tentar realizar o que uma pessoa faz sem os erros
* Busca inspirações na Natureza
* O que são algoritmos Bioinspirados?
- Inspirados no comportamento de seres vivos em convência social;
- Conhecimento colaborativo/compartilhado;
- Métodos Heurístios (não deterministicos)
> A resposta não é unica é encontrar a melhor solução dentro de um espaço de busca
> Não necessária mente é o melhor
> Solução ótima global
- Algoritmo inspirado em uma Colônia de formigas
- Algoritmo inspirado em uma Colônia de abelhas
- Redes Neurais
- Genética
> Núcleo
> Cromossomo
> Gene
- Lógica Fuzzy: Qual taça tem bastante vinho?
> Lógica nebulosa
> Não tem resposta exata para tudo
---
* Algoritmos Heurísticos x Determinísticos
- Diferença entre valores Determinísticos e Heuristícos
> Deterministico: Tem uma resposta exata
# Só uma resposta
> Heuristícos: Varios critérios que podem ser chamados de Fuzzy
# Lógica difusa
# Vários valores para responder um mesmo problema
# As relações humanas geralmente são Heuristícas
- O que mais usamos: RNA
> Como os neurôneos se comportam
- Aplicações em sistemas
> Algoritmo de roteamento
# Robótica
# Destino
# Redes
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/kawan_dio_me/EWwdKbXjY7ZIiN3Kin6MtfEBB63W1WfF4HzRWh0bn1qtWA?e=sFipbO
-----------------------------------------------
-----------------------------------------------
Redes Neurais Artificiais
---
* Cria com inspiração na natureza
- É um Algoritmo bioinspirado
* Estrutura de uma RNA
- Constituintes da célula
* Redes Biológicas x Artificiais
- Neurônio artificial
> Sinais de entrada
> Pessos sinápticos
> Combinador Linear
> Função de Ativação
> Limiar de ativação
> Potencial de ativação
> Sinal de saida
---
* Treinamento de uma Rede Neural Artificial
- Dados de entrada e saída
> Entrada => Processo => Dados interpretados na saída
- Relação de entrada e saída
> Imagem de entrada => Dados gerados
- Análise de Características (Features)
> Redes Neurais Artificiais
# Input => Neural network => Hidden layers => Output
- Dados a serem interpretados
> Campo receptivo
> Convolução espacial com n filtros
> Filtro i com pesos w
> n feature maps
> f(i, x, y) pixel de saída
- Análise de características (features)
> Imagem de entrada => filtros => Feature maps => Filtros => feature maps
- Caixa preta gerada no treino
- Features
> Faces
> Objetos
> Formatos
---
* Classificação : Execução da Rede Neural Artificial
- Classificação de objetos
> Dados a serem interpretados
# Entrada, Rótulo e Classificação
> Mnist Dataset
- Dataset - Base de treino
- O que gera um Treinamento
> Dados de aprendizado
# Pesos gerados no treinamento
# Arquivos de pesos
- Modelo de treinamento
> Pesos gerados em uma rede
---
* Material: https://academiapme-my.sharepoint.com/:p:/g/personal/kawan_dio_me/Ed3FPLEoKiJKgbKIq1pabGsBA1_a7sJLg_QHZ4dj0xb6Lg?e=VI5lnA
- E-book: https://academiapme-my.sharepoint.com/personal/renato_dio_me/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Frenato%5Fdio%5Fme%2FDocuments%2FDigital%20Innovation%20One%2Fslides%20aulas%20diversas%2FTrilhas%2FMachine%20Learning%2FComo%20funciona%20o%20Deep%20Learning%5F2017%2Epdf&parent=%2Fpersonal%2Frenato%5Fdio%5Fme%2FDocuments%2FDigital%20Innovation%20One%2Fslides%20aulas%20diversas%2FTrilhas%2FMachine%20Learning&ga=1
-----------------------------------------------
-----------------------------------------------



PAREI EM: Biblioteca Pandas e suas funções => 03:39